# Create your views here.

#from django.shortcuts import render_to_response, get_object_or_404
#from django.http import Http404
#from django.template import RequestContext
#from polls.models import Poll

import sys
import os
sys.path.append('/home/ubuntu/Dropbox/automusic/amusic1')
from learn import *

from django.shortcuts import get_object_or_404, render_to_response
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.template import RequestContext
from polls.models import Choice, Poll

from django.shortcuts import render
from django import forms

from django.core.servers.basehttp import FileWrapper



#from learn import *


#def index(request):
#    return HttpResponse('<form name="input" action="html_form_action.asp" method="get"> Username: <input type="text" name="user"> <input type="submit" value="Submit"> </form> ')




class ContactForm(forms.Form):
    #subject = forms.CharField(max_length=100)
    #message = forms.CharField()
    #sender = forms.EmailField()
    #midiSources = {}
    for root, dirs, filenames in os.walk("midi_source"):
        for filename in filenames:
            if filename.endswith('.mid'):
                print filename
                exec(os.path.splitext(filename)[0] + " = forms.BooleanField(required=False)")
                #x = forms.EmailField()
                #y = forms.BooleanField(required=False)

def about(request):
    return HttpResponse('<h2>aisings.com</h2> Founders: <br>  <a href="http://www.linkedin.com/in/rickgiuly">Rick Giuly</a><br>  <a href="http://www.linkedin.com/pub/austin-smith/24/3ba/54a">Austin Smith</a><br>    ')


def index(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ContactForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            # Process the data in form.cleaned_data
            # ...
            return HttpResponseRedirect('/thanks/') # Redirect after POST
    else:
        form = ContactForm() # An unbound form

    return render(request, 'contact.html', {
        'form': form,
    })


def result(request):

    print "request", request.POST

    testCreateProbabilitySong(midiFilenames=request.POST)
    #render_to_response('result.html', {'title': "hello"})

    myfile = open(os.path.join("tracks", "outputsong.mp3"))

    response = HttpResponse(FileWrapper(myfile), content_type='audio/mpeg')
    response['Content-Disposition'] = 'attachment; filename=myfile.mp3'
    return response

    return HttpResponse("result")


def detail(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    return render_to_response('polls/detail.html', {'poll': p},
                               context_instance=RequestContext(request))



def results(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    return render_to_response('polls/results.html', {'poll': p})




def vote(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    try:
        selected_choice = p.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the poll voting form.
        return render_to_response('polls/detail.html', {
            'poll': p,
            'error_message': "You didn't select a choice.",
        }, context_instance=RequestContext(request))
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls.views.results', args=(p.id,)))

